{"version":3,"sources":["webpack://ant/webpack/universalModuleDefinition","webpack://ant/webpack/bootstrap","webpack://ant/./src/core/eventDispatcher.ts","webpack://ant/./src/parsers/debug/debugModule.ts","webpack://ant/./src/core/events.ts","webpack://ant/./src/core/element.ts","webpack://ant/./src/parsers/parserClass.ts","webpack://ant/./src/parsers/debug/debugClass.ts","webpack://ant/./src/utils/datasetClass.ts","webpack://ant/./src/parsers/download/downloadModule.ts","webpack://ant/./src/parsers/parsersModule.ts","webpack://ant/./src/parsers/download/downloadClass.ts","webpack://ant/./src/ant.ts","webpack://ant/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","debugModule_DebugModule","EventDispatcher","this","handlers","fire","event","_i","_a","length","h","register","handler","push","events_AntEvents","AntEvents","ant","readyDocumentDispatcher","initListenReadyDocument","th1","document","addEventListener","onLoadDocument","AntElement","hooks","registerHook","hook","cb","callHook","element","keys","indexOf","ix","parse","x","attributes","parseOrCallFnFromAttributeElement","attr","sender","data","_this","elements","querySelectorAll","forEach","ele","response","scope","callbacks","Parser","nameHook","id","getAttribute","storeInAnt","getAnt","DebugElement","_super","message","console","log","__extends","DebugModule","init","downloadModule_DownloadModule","parsersModule_ParsersModule","Dataset","format","columns","data1","JSON","jsonVirgen","features","map","feature","RowDataset","isGeometry","info","item","geometry","initKeys","properties","omitirKey","getValue","downloadClass_DownloadElement","DownloadElement","url","success","loadData","downloadClass_extends","req","XMLHttpRequest","open","onreadystatechange","readyState","status","dataset","responseText","warn","send","DownloadModule","ParsersModule","initParsers","ant_Ant","Ant","options","events","parseItems_onLoad","__webpack_exports__"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ant\"] = factory();\n\telse\n\t\troot[\"ant\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export type Handler<E> = (event: E) => void;\n\nexport class EventDispatcher<E> { \n    private handlers: Handler<E>[] = [];\n    fire(event: E) { \n        for (let h of this.handlers)\n            h(event);\n    }\n    register(handler: Handler<E>) { \n        this.handlers.push(handler);\n    }\n}","import {DebugElement} from \"./debugClass\"\nimport { Ant } from \"../../ant\";\n\nexport module DebugModule{\n\n    export let nameHook=\"ant-debug\";\n    \n    /**\n     * initialize the element with hook named \"ant-debug\"\n     *\n     * @export\n     * @param {Element} element\n     * @param {Ant} ant\n     */\n    export function init(element:Element,ant:Ant){\n        let debug=new DebugElement(element,ant);\n    }\n    \n}","import { Ant } from \"../ant\";\nimport { EventDispatcher, Handler } from \"./eventDispatcher\"\n/**\n *represents the object that contains the events and properties required for Ant\n *\n * @export\n * @class AntEvents\n */\nexport class AntEvents {\n    /**\n     *Instance of the main Ant object\n     *\n     * @type {Ant}\n     * @memberof AntEvents\n     */\n    ant: Ant;\n\n    /**\n     *dispatcher of the ReadyDocumentEvent\n     *\n     * @private\n     * @memberof AntEvents\n     */\n    private readyDocumentDispatcher = new EventDispatcher<ReadyDocumentEvent>();\n\n    /**\n     *Creates an instance of AntEvents.\n     * @param {Ant} ant\n     * @memberof AntEvents\n     */\n    constructor(ant: Ant) {\n        this.ant = ant;\n        this.initListenReadyDocument();\n    }\n    /**\n     *start listening to the DOMContentLoaded event\n     *\n     * @private\n     * @memberof AntEvents\n     */\n    private initListenReadyDocument() {\n        let th1 = this;\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            th1.readyDocumentDispatcher.fire({})\n        }, false);\n    }\n\n    \n    /**\n     * Rewritable function from the AntEvent instance\\n   \n     * for example\\n\\n\n     * 'let antEvent=new AntEvent(antInstance);\n     *  antevent.onLoadDocument(()=>{ //code here...});'\n     * \n     * @param {Handler<ReadyDocumentEvent>} handler Promise function to call when the event is fulfilled\n     * @memberof AntEvents\n     */\n    public onLoadDocument(handler: Handler<ReadyDocumentEvent>) {\n        this.readyDocumentDispatcher.register(handler);\n    }\n}\n\n/**\n * represents the structure of the event parameter\n *\n * @interface ReadyDocumentEvent\n */\ninterface ReadyDocumentEvent { }","import { Ant } from \"../ant\";\nimport { Parser } from \"../parsers/parserClass\";\n\n/**\n *represent the object that initialize the ant hooks and parse Dom elements\n *\n * @export\n * @class AntElement\n */\nexport class AntElement {\n    /**\n     *Instance of the main Ant object\n     *\n     * @type {Ant}\n     * @memberof AntEvents\n     */\n    ant:Ant;\n    /**\n     * simple javascript object that stores all registered hooks in the Ant library\n     *\n     * @type {*}\n     * @memberof AntElement\n     */\n    hooks:any;\n    /**\n     *Creates an instance of AntElement.\n     * @param {Ant} ant\n     * @memberof AntElement\n     */\n    constructor(ant:Ant) {\n        this.ant=ant;\n        this.hooks={};\n    }\n    /**\n    * registers a new hook type and its function that initializes it\n    *\n    * @param {string} hook name of hook \\n e.g \"ant-debug\"\n    * @param {Function} cb \n    * @memberof AntElement\n    */\n    public registerHook(hook:string,cb:Function){\n        if (!this.hooks[hook]){\n            this.hooks[hook] = [];\n        }\n\n        this.hooks[hook].push(cb);\n    }\n\n    /**\n     * execute the function that initializes the parser of hook\n     *\n     * @param {string} hook name of hook \\n e.g \"ant-debug\"\n     * @param {Element} element \n     * @memberof AntElement\n     */\n    public callHook(hook:string,element:Element){\n        if (this.hooks && Object.keys(this.hooks).indexOf(hook) !== -1) { \n            for (var ix in this.hooks[hook]) { \n                this.hooks[hook][ix](element,this.ant);\n            }\n        }\n    }\n\n    /**\n     * search among all registered hooks, if that apply for this element\n     *\n     * @param {Element} element\n     * @memberof AntElement\n     */\n    public parse(element:Element){\n        for (var x in element.attributes) {\n            if (element.attributes[x].name && element.attributes[x].name.indexOf(\"ant-\") === 0) {\n                this.callHook (element.attributes[x].name, element);\n            }\n        }\n    }\n\n    /**\n     * function that verifies what value the attribute has and decides if it parse it or calls it from the scope\n     *  \n     * @param {string} attr\n     * @memberof AntElement\n     */\n    public parseOrCallFnFromAttributeElement(attr:string,sender:Parser|undefined,data:any){\n        //verify if is selector or scope item of ant\n        let elements=document.querySelectorAll(attr);\n        if(elements.length>0){\n            elements.forEach((ele)=>{\n                this.parse(ele);\n            });\n        }else{\n            //is item scope (callback)\n            let response:responseCallback={sender:sender,data:data}\n            this.ant.scope.callbacks[attr](response);\n        }\n    }\n}\n\n/**\n * represents return object in callback stored in Ant scope\n *\n * @interface responseCallback\n */\ninterface responseCallback{\n    sender:Parser|undefined,\n    data:any\n\n}\n","import { Ant } from \"../ant\";\n\n/**\n * superclass that generalize Parser functions and properties  \n *\n * @export\n * @class Parser\n */\nexport class Parser {\n    /**\n     * instance of ant object\n     *\n     * @type {Ant}\n     * @memberof Parser\n     */\n    private ant:Ant;\n\n    /**\n     * the HtmlElement\n     *\n     * @type {Element}\n     * @memberof Parser\n     */\n    public element:Element;\n\n    /**\n     * identifier if element contains name-hook_id attribute\n     *\n     * @type {string}\n     * @memberof Parser\n     */\n    public id:string=\"_\";\n\n    /**\n     *name of main hook of the element\n     *\n     * @type {string}\n     * @memberof Parser\n     */\n    public nameHook:string;\n    /**\n     *Creates an instance of Parser.\n     * @param {Element} element HtmlElement\n     * @param {Ant} ant instance  of Ant object\n     * @param {string} [nameHook=\"ant\"]\n     * @memberof Parser\n     */\n    constructor(element:Element,ant:Ant, nameHook:string=\"ant\") {\n        this.ant=ant;\n        this.element=element;\n        this.nameHook=nameHook;\n        //verify if have id attr\n        if(this.element.getAttribute(\"id\") != null){\n            this.id=<string>(this.element.getAttribute(\"id\"));\n            // can be saved in the ant scope if contains id\n            this.storeInAnt();\n        }\n    }\n    \n    /**\n     *returns instance main ant\n     *\n     * @returns {Ant} ant instance\n     * @memberof Parser\n     */\n    public getAnt():Ant{\n        return this.ant;\n    }\n\n    /**\n     * this function save this element in ant.scope.elements\\n\n     * accesible with ant.scope.elements[id]\n     *\n     * @memberof Parser\n     */\n    public storeInAnt(){\n        this.ant.scope.elements[this.id]=this;\n    }\n\n}","import { Parser } from \"../parserClass\";\nimport { Ant } from \"../../ant\";\n/**\n *represent the element with hook named \"ant-debug\"\n *\n * @export\n * @class DebugElement\n * @extends {Parser}\n */\nexport class DebugElement extends Parser {\n    /**\n     *the message to show in debug\n     *\n     * @type {*}\n     * @memberof DebugElement\n     */\n    public message: any;\n\n    /**\n     *Creates an instance of DebugElement.\n     * @param {Element} element HtmlElement\n     * @param {Ant} ant instance of ant main object\n     * @memberof DebugElement\n     */\n    constructor(element:Element,ant:Ant) {\n        super(element,ant)\n        this.message=this.element.getAttribute('ant-debug');\n        console.log(\"ANT-DEBUG[\"+this.message+\"]\");\n    }\n}","\nexport class Dataset {\n    data:Array<RowDataset>;\n    format:string;\n    isGeometry:boolean;\n    columns:Array<string>=[\"\"];\n    jsonVirgen!:any;\n    \n    constructor(data:string,format=\"json\") {\n        this.format=format;\n        if(format==\"geojson\"){\n            let data1=JSON.parse(data);\n            this.jsonVirgen=data1\n            this.data=data1.features.map((feature:any)=>{\n                return new RowDataset(feature,format);\n            });\n            this.isGeometry=true\n        }else if(format==\"csv\"){\n            console.info(\"necesitamos crear un parser para tablas en formato csv\")\n            let data1=[\"\"];\n            this.data=data1.map((feature:any)=>{\n                return new RowDataset(feature,format);\n            });\n            this.isGeometry=true\n        }else{\n            let data1=JSON.parse(data);\n            this.data=data1.map((item:any)=>{\n                return new RowDataset(item,format);\n            });\n            this.isGeometry=false\n        }\n\n        if(this.data.length>0){\n            this.columns=this.data[0].keys;\n        }\n        \n    }\n\n}\nexport class RowDataset{\n    public keys:Array<string>=[];\n    public object:any={};\n    public geometry:any=null;\n\n    constructor(object:any,format=\"json\"){\n        if(format==\"geojson\"){\n            this.geometry=object.geometry;\n            this.initKeys(object.properties);\n            this.object=object.properties;\n        }else{\n            this.initKeys(object);\n            this.object=object;\n        }\n    }\n\n    private initKeys(object:any,omitirKey:string=\"\"){\n        for(let key in object){\n            this.keys.push(key);\n        }\n    }\n\n    public getValue(key:string):any{\n        //debugger\n        //console.log(key,this.object);\n        return this.object[key];\n    }\n}\n","import { DownloadElement } from \"./downloadClass\"\nimport { Ant } from \"../../ant\";\n\n/**\n * Modulo que contiene la inicializacion del parser Download\n */\nexport module DownloadModule {\n    \n    export let nameHook = \"ant-download\";\n    /**\n     * initialize the element with hook named \"ant-download\"\n     *\n     * @export\n     * @param {Element} element\n     * @param {Ant} ant\n     */\n    export function init(element: Element, ant: Ant) {\n        let debug = new DownloadElement(element, ant);\n    }\n\n}","import { DebugModule } from \"./debug/debugModule\";\nimport { DownloadModule } from \"./download/downloadModule\";\nimport { Ant } from \"../ant\";\n\n\nexport module ParsersModule{\n    /**\n     *initialize all parsers\n     *\n     * @export\n     * @param {Ant} ant instance of Ant object\n     */\n    export function initParsers(ant:Ant){\n        ant.element.registerHook(DebugModule.nameHook,DebugModule.init,);\n        ant.element.registerHook(DownloadModule.nameHook,DownloadModule.init);\n    }\n}\n\n","import { Parser } from \"../parserClass\";\nimport { Ant } from \"../../ant\";\nimport { Dataset } from \"../../utils/datasetClass\";\n\n/**\n *represent the element with hook named \"ant-download\"\n *\n * @export\n * @class DownloadElement\n * @extends {Parser}\n */\nexport class DownloadElement extends Parser{\n    /**\n     *URL of data\n     *\n     * @type {*}\n     * @memberof DownloadElement\n     */\n    public url:any;\n    /**\n     *attribute to parse on succes data\n     *\n     * @type {*}\n     * @memberof DownloadElement\n     */\n    public success:any;\n    /**\n     *format of the data : \\n geojson,json,csv, etc\n     *\n     * @type {string}\n     * @memberof DownloadElement\n     */\n    public format:string=\"json\";\n\n    /**\n     * object stored data in the current format \n     *\n     * @type {Dataset}\n     * @memberof DownloadElement\n     */\n    public dataset!:Dataset;\n\n    /**\n     * Creates an instance of DownloadElement.\n     * @param {Element} element HtmlElement\n     * @param {Ant} ant instance of ant main object\n     * @memberof DownloadElement\n     */\n    constructor(element:Element,ant:Ant) {\n        super(element,ant,\"ant-download\");\n        this.url=this.element.getAttribute(this.nameHook);\n        this.format=(this.element.getAttribute(this.nameHook+\"_format\") == null )?\"json\":<string>(this.element.getAttribute(this.nameHook+\"_format\"));\n        this.success=this.element.getAttribute(this.nameHook+\"_success\");\n        this.loadData();\n    }\n    /**\n     * send xhr request\n     *\n     * @private\n     * @memberof DownloadElement\n     */\n    private loadData(){\n        let req=new XMLHttpRequest();\n        let th1=this;\n        req.open(\"GET\",this.url,true);\n        req.onreadystatechange=function(){\n            //on load all\n            if(req.readyState==4){\n                if(req.status==200){\n                    //parse the elements\n                    th1.dataset=new Dataset(req.responseText,th1.format);\n                    th1.getAnt().element.parseOrCallFnFromAttributeElement(th1.success,th1,th1.dataset);\n                    //let elementos=document.querySelectorAll(th1.success);\n                    //elementos.forEach((ele)=>{\n                      //  th1.ant.element.parse(ele);\n                    //});\n                    //console.log(req.responseText);\n                }else{\n                    console.warn(\"error on XMLHttpRequest \"+th1.url);\n                }\n            }\n        }\n        req.send(null);\n    }\n}","import {AntEvents} from \"./core/events\";\nimport {AntElement} from \"./core/element\";\nimport {ParsersModule} from \"./parsers/parsersModule\"\n\n/**\n *represents the object 'Ant' that the end user will instantiate, when creating a 'new ANT', everything is initialized\n *\n * @export\n * @class Ant\n */\nexport class Ant {\n    /**\n     *to initialize ant events\n     *\n     * @type {AntEvents}\n     * @memberof Ant\n     */\n    events:AntEvents;\n    /**\n     *to initialize the ant hooks and parse Dom elements\n     *\n     * @type {AntElement}\n     * @memberof Ants\n     */\n    element:AntElement;\n\n    /**\n     *\n     *\n     * @type {AntScope}\n     * @memberof Ant\n     */\n    public scope!:AntScope;\n\n    /**\n     *Creates an instance of Ant.\n     * @param {*} options \n     * @memberof Ant\n     */\n    constructor(options:any) {\n        this.element=new AntElement(this);\n        this.events=new AntEvents(this);\n        ParsersModule.initParsers(this);\n        this.events.onLoadDocument(()=>{\n            this.parseItems_onLoad();\n        });\n        this.scope={data:{},callbacks:{},elements:{}};\n        if( options.hasOwnProperty('data')){\n            this.scope.data=options.data;\n        }\n        if( options.hasOwnProperty('callbacks')){\n            this.scope.callbacks=options.callbacks;\n        }\n    }\n\n    /**\n     *call to start the parser of the DOM elements that have the attribute [ant-onload]\n     *\n     * @private\n     * @memberof Ant\n     */\n    private parseItems_onLoad(){\n        //TODO: parse elements with ant-onload, download data defined in options, etc.\n        let elements=document.querySelectorAll('[ant-onload]');\n        elements.forEach((ele)=>{\n            this.element.parse(ele);\n        });\n    }\n    \n}\n\ninterface AntScope{\n    data:any,\n    callbacks:any,\n    elements:any  \n}\n","import {Ant} from \"./ant\";\nexport  {Ant};"],"sourceRoot":""}